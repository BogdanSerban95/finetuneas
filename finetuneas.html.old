<!DOCTYPE HTML>
<html>
<head>
<title>finetuneas, HTML interface for fine-tuning aeneas alignment output</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>

<style>
html,body{margin:0;min-height:100%;}
#container{text-align:center;min-height:100%;position:absolute;}
button{margin:5px}
.tg{table-layout:fixed; width:100%; border-spacing:0; position:relative; direction:ltr; margin:100px 0}
.piece{  margin-right:auto; margin-left:auto; font-size:24px; line-height:150%; font-family:Tahoma, Geneva, sans-serif}
.td{ vertical-align: middle;}
.edit{text-align:right}
.position,.increase,.decrease{opacity:0.6;position:relative; margin:5px; font-size:140%; line-height:110%; cursor: pointer;font-weight:900;border-style:solid; border-color:#999; border-width:1px 3px; background-color: #333;color:#fff;}
.position{ padding:2px 5px 0px 5px; margin-right:50px; }
.increase { padding:2px 8px 0px 8px; }
.decrease {  padding:0px 8px 2px 8px;  bottom:2px; margin-right:15px; }
.increase, .decrease, .position, #stop {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}
a:hover {opacity:1}
td{text-align:center; height:80px;}
#saveanddownload{position:fixed;  z-index:10; bottom:30px; left:25px; text-align:left; visibility:hidden}
#fileinput, #audioinput{position:relative;bottom:5px}
#inst { margin: 50px auto 150px auto; font-size:24px; max-width:700px;  border: 1px solid black; padding:20px;}
.normal{ line-height:150%;font-size:20px;text-align:left; margin:15px 50px}
.note{font-size:16px;margin:15px 80px;}
#controls {position:fixed; z-index:10; text-align:right;top:30px; left:25px; display:none; background-color:#fff;}
#audioticker{color:dimgrey; font-size:14px; }
#stop{font-size:10px;  position:relative; bottom:2px; opacity: 0.6; padding:0 6px 3px 6px; margin:2px; cursor: pointer;background-color: #333;color:#fff;font-weight:900;font-family:Tahoma, Geneva, sans-serif}
#stop:hover {opacity:1}
#step2div {display:none}
.footer{font-size:12px; text-align:center;position:absolute; bottom:10px; left:0; right:0}
.footer a{color:#555;}
</style>

</head>

<body>

<!-- CONTAINER BEGIN -->
<div id="container">

    <div id="inst">
        <p class='heading'><b>finetuneas</b></p>
        <p class='normal'><b>1.</b> Before you start making adjustments, check several fragments at random to make sure the sync map is mostly correct. If not, check aeneas parameters and run it again.</p>
        <p class='normal'><b>2.</b> To check the begin time of each fragment, click on the corresponding timestamp. If necessary, use the "+" and "-" buttons to adjust it.</p>
        <p class='normal'><b>3.</b> When done, you can save the adjusted sync map either in JSON or TSV (tab separated) format.</p>
        <p class='normal'><b>4.</b> To start working, select your audio file:</p>
        <p class='normal'><input type="file" id="audioinput" accept="audio/*" autocomplete="off"/><span id="audioinput2"></span></p>
        <div id="step2div">
            <p class='normal'><b>5.</b> Now, select your JSON sync map file:</p>
            <p class='normal'><input type="file" id="fileinput" accept=".json" autocomplete="off"/><span id="fileinput2"></span></p>
        </div>
    </div>

    <audio id="audioplayer" src="" ontimeupdate="ticker(this.currentTime);"></audio>

    <div id="controls" >
        <span id="audioticker">
        </span>
        <span id="playpause">
            <a id="stop">ıı</a>
        </span>
    </div>

    <div id="piecesintable">
        <table id='tb' class='tg'>
        </table>
    </div>

    <div id="saveanddownload" style="" >
        <button id="downloadjson" style="display:block">Save as JSON</button>
        <button id="downloadtsv" style="display:block">Save as TSV</button>
    </div>

    <div class='footer'><a href='https://github.com/ozdefir/finetuneas'>finetuneas v1.0</a> <br>© 2015 Firat Özdemir</div>

</div>
<!-- CONTAINER END -->

<script type="text/javascript">

var rows=[];
var fragments=[];
var currentno=0;
var audiobj= document.getElementById('audioplayer');
var ainfo="";
var cinfo="";
var tsvlines=[];
var texts=[];
var url;
document.getElementById('audioinput').addEventListener('change', loadAudio, false);
document.getElementById('fileinput').addEventListener('change', parseJSON, false);

function loadAudio(evt) {
    var f = evt.target.files[0]; 
    if (f) {
        var audiopath=URL.createObjectURL(f);
        audiobj.setAttribute("src",audiopath);
        document.getElementById('audioinput').style.display="none";
        document.getElementById('audioinput2').innerHTML=f.name;
        document.getElementById('step2div').style.display="block";
    }
    else { 
        alert("Failed to load file");
    }
}

function parseJSON(evt) {
    var f = evt.target.files[0]; 
    if (f) {
        var r = new FileReader();
        
        r.onload = function(e) { 
            JsonData = JSON.parse(e.target.result);
            fragments=JsonData.fragments;
            
            //display file info
            document.getElementById('fileinput').style.display="none";
            document.getElementById('fileinput2').innerHTML=f.name;

            //build the table
            for (i=0; i<fragments.length; i++){
            
                //if there are multiple lines in each fragment join them
                texts[i]=fragments[i].lines.join("<br>");
                
                //roundup the timestamp, good for html5 performence (i guess)
                fragments[i].begin = Math.round(fragments[i].begin*100)/100;
                fragments[i].end = Math.round(fragments[i].end*100)/100;
                rows[i] ="<tr><td></td><td><a class='piece' id='" +i+ "t' no=" + i + ">" + texts[i] + "</a></td><td class='edit'><a class='position' style='' no=" + i + " id=" +i+ " >"+ fragments[i].begin.toFixed(2)+"</a><a class='increase' style='' id='" +i+ "i' no=" + i + ">+</a><a class='decrease' style='' id='" +i+ "d' no=" + i + ">&ndash;</a></td></tr>";
            }
            var tablecontent =rows.join("");
            document.getElementById("tb").innerHTML = "<col width='300'><col ><col width='300'><tbody>"+tablecontent+"</tbody>";
            
            
            // add event listeners
            for (i=0; i<fragments.length; i++){
                document.getElementById(i).addEventListener("click", positionClick);
                document.getElementById(i+"i").addEventListener("click", increaseClick);
                document.getElementById(i+"d").addEventListener("click", decreaseClick);
            }
            document.getElementById("stop").addEventListener("click", stopClick);
            document.getElementById("downloadjson").addEventListener("click", downloadJsonClick);
            document.getElementById("downloadtsv").addEventListener("click", downloadTsvClick);
            
            //window.location = "#piecesintable";

            function positionClick(){
                document.getElementById(currentno+"t").style.backgroundColor = "";
                currentno = this.id
                document.getElementById(currentno+"t").style.backgroundColor = "yellow";
                audiobj.currentTime = fragments[currentno].begin;
                audiobj.play();
                document.getElementById('controls').style.display = 'block';
                document.getElementById('stop').style.display = 'inline';
            };
            
            function increaseClick(){
                var changedin = parseFloat(this.id);
                fragments[changedin].begin = Math.round((fragments[changedin].begin+0.1)*100)/100;
                if(changedin>0){
                    fragments[changedin-1].end = fragments[changedin].begin;
                };
                document.getElementById(changedin).innerHTML = fragments[changedin].begin.toFixed(2);
                audiobj.currentTime = fragments[changedin].begin;
            };
            
            function decreaseClick(){
                var changedin = parseFloat(this.id);
                fragments[changedin].begin = Math.round((fragments[changedin].begin-0.1)*100)/100;
                if(changedin>0){
                    fragments[changedin-1].end = fragments[changedin].begin;
                };
                document.getElementById(changedin).innerHTML = fragments[changedin].begin.toFixed(2);
                audiobj.currentTime = fragments[changedin].begin;
            };
            
            function stopClick(){
                audiobj.pause();
                document.getElementById("stop").style.display = "none";
            };
            var downloadData = (function () {
                var a = document.createElement("a");
                document.body.appendChild(a);
                a.style = "display: none";
                return function (data, fileName) {
        
                blob = new Blob([data], {type: "octet/stream"}),
                url = window.URL.createObjectURL(blob);
                a.href = url;
                a.download = fileName;
                a.click();
                };
            }());
            
            function downloadJsonClick(){
            
                var JsonOutData= new Object();
                JsonOutData.fragments=fragments;
                
                //to convert the numbers to strings (as in the original)
                function replaceToString(key, value) {
                    if (typeof value === "number") {
                        value = value.toString();
                    }
                    return value;
                }
                
                //stringify and save;
                var data=JSON.stringify(JsonOutData,replaceToString," ");
                fileName = prompt("The file will be saved to your default download directory. Please enter a filename:", "updated.json");
                setTimeout(function(){
                downloadData(data, fileName);
                }, 500);
                window.URL.revokeObjectURL(url);
            }
            
            function downloadTsvClick(){
                fileName = prompt("The file will be saved to your default download directory. Please enter a filename:", "updated.tsv");
                setTimeout(function(){
                for (i=0; i<fragments.length; i++){
                    tsvlines[i] = fragments[i].begin+"\t"+fragments[i].end+"\t"+fragments[i].id;
                };
                var data = tsvlines.join("\n");
                downloadData(data, fileName);
                }, 500);
                window.URL.revokeObjectURL(url);
                }
      }
      r.readAsText(f);
    } 
    else { 
      alert("Failed to load file");
    }
}    

function ticker(cTime){
    //"timeupdate" alone isn't accurate enough to pause exactly at the end of the fragment. Another option is to use temporal dimensions for audio source but Chrome doesn't support it with blobs.
    //If in the last 350 ms, calculate the time left, then set timeout.
    if( cTime>fragments[currentno].end-0.35){
        var msleft=(fragments[currentno].end-cTime)*1000;
        var thisno = currentno;
        setTimeout(function(){
            if(thisno==currentno){ // to be sure another line was not clicked in the meantime
                audiobj.pause();
                document.getElementById(thisno+"t").style.backgroundColor = "lightgreen";
                document.getElementById("stop").style.display = "none";
            }
        }, msleft)
    }
    
    //display current time
    document.getElementById("audioticker").innerHTML = cTime.toFixed(2)+" s";

}

</script>
<body>
</html>
